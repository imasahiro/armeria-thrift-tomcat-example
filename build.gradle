buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.15'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.11.RELEASE'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'com.google.osdetector'
apply plugin: 'net.ltgt.apt'
apply plugin: 'org.springframework.boot'
apply plugin: com.google.protobuf.gradle.ProtobufPlugin

def versionOf = { project.property("${it}.version") }

def onIdeImport = { Closure action ->
    if (System.getProperty('idea.active') == 'true' ||
        System.getProperty('eclipse.home.location') != null) {
        project.afterEvaluate {
            action.delegate = project
            action()
        }
    }
}
archivesBaseName = project.name

repositories {
    mavenCentral()
}

// Require Java 8 to build the project.
tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
    options.warnings = false
    options.debug = true
    options.incremental = true
}

dependencies {
    compile 'com.linecorp.armeria:armeria-spring-boot-starter-shaded:0.59.2'
    compile 'com.linecorp.armeria:armeria-grpc-shaded:0.59.2'
    compile 'com.linecorp.armeria:armeria-thrift-shaded:0.59.2'
    compile "com.linecorp.armeria:armeria-tomcat-shaded:0.59.2"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'

    compile 'com.google.guava:guava:24.0-jre'
    compile 'org.springframework:spring-context-support'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-logging'

    testCompile 'junit:junit:4.12'
}

// Delete the source files generated by the Thrift compiler.
clean {
    [ 'main', 'test' ].each {
        delete "${project.projectDir}/src/$it/gen-java"
    }
}

// Compile the Thrift service definitions.
task compileThrift(group: 'Build',
                   description: 'Compiles the .thrift files') {
    def thriftPath = "${rootProject.projectDir}/thrift/thrift.${osdetector.classifier}"

    [ 'main', 'test' ].each { scope ->
        def inputDir = "${project.projectDir}/src/${scope}/thrift"
        def outputDir = "${project.projectDir}/src/${scope}/gen-java"

        if (project.file(inputDir).isDirectory()) {
            inputs.dir inputDir
            outputs.dir outputDir

            project.sourceSets[scope].java.srcDir outputDir

            doLast {
                project.fileTree(inputDir) {
                    include '**/*.thrift'
                }.each { sourceFile ->
                    project.mkdir(outputDir)
                    project.exec {
                        commandLine thriftPath,
                                '-gen', 'java',
                                '-out', outputDir,
                                '-I', "${sourceFile.parentFile.absolutePath}",
                                sourceFile.absolutePath
                    }
                }
            }
        }
    }
}

// Ensure the generated Thrift source files are available during the build.
project.tasks.compileJava.dependsOn(tasks.compileThrift)
onIdeImport { project.tasks.compileThrift.execute() }

// Compile protobuf
protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.5.1-1'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:1.9.0"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}


// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
